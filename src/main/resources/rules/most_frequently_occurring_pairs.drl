import java.util.ArrayList;
import java.util.List;
import com.lottery.model.MostFrequentlyOccurringPairsResult;
import com.lottery.model.WeeklyDrawList;
import com.lottery.model.WeeklyDraw;
import com.lottery.model.mfop_utils.Row;
import com.lottery.model.mfop_utils.DrawsInTwoDimension;

rule "Most Frequently Occurring Pairs"
    when
        $drawList : WeeklyDrawList()
        $result : MostFrequentlyOccurringPairsResult()
    then
        logic($drawList,$result);
    end

/*
 *Az egyszerűsítés kedvéért a teljes logikát lefuttatja a beküldött WeeklydrawList és
 * MostFrequentlyOccurringPairsResult elemeire.
 */
function void logic(WeeklyDrawList drawList, MostFrequentlyOccurringPairsResult result){
        for(WeeklyDraw draw : drawList.getDrawListPreparedForDrools()){
            mFOPLogic(draw, result);
        }
        resultFiller(result.getLottoArray(),result.getResultArray());
}

/*
 * A 2D lottó struktúrát tölti fel a húzások alapján. Minden sor egy lehetséges húzást jelöl.
 * Minden oszlop egy lehetséges pár.
 * A metszéspontokban található számok a párok előfordulásáinak számát mutatják.
 */
function void mFOPLogic(WeeklyDraw draw, MostFrequentlyOccurringPairsResult result ){

    Integer[] drawNumbers = draw.getDrawnNumbers();

    for(int n = 0; n < drawNumbers.length; n++){
        for(int i = n+1; i < drawNumbers.length; i++){
            if(drawNumbers[n] < drawNumbers[i]) {
                result.getLottoArray().getRows().get((drawNumbers[n] - 1)).getColumns()[(drawNumbers[i] - drawNumbers[n])-1]++;
            }else if(drawNumbers[n] > drawNumbers [i] ){
                result.getLottoArray().getRows().get((drawNumbers[i] - 1)).getColumns()[(drawNumbers[n] - drawNumbers[i])-1]++;
            }
        }
    }
}

/*
 * Ez a method tölti fel a resultArray field-eket.
 */
function void resultFiller(DrawsInTwoDimension lottoArray, DrawsInTwoDimension resultArray){
    int max = findMax(lottoArray);
    fillByCompareValuesWithMax(max,lottoArray,resultArray);
}

/*
 * Ez a method végig megy egyszer az egész 2D tábla és visszaadja a legnagyobb számot.
 */
function int findMax(DrawsInTwoDimension lottoArray){

    int max = 0;
    for(Row arr : lottoArray.getRows()){
        Integer[] tempArray = arr.getColumns().clone();
        Arrays.sort(tempArray);
        if(tempArray.length > 0) {
            if(tempArray[tempArray.length - 1] > max) {
                max = tempArray[tempArray.length - 1];
            }
        }
    }
    return max;
}

/*
 * Ez a method újra végig megy a 2D táblán és a már tárolt legnagyobb számhoz hasonlítja a
 * a mezőket, ha talál egyezést, a pozíció alapján értéket generál a resultArray-be.
 */
function void fillByCompareValuesWithMax(int max, DrawsInTwoDimension lottoArray,DrawsInTwoDimension resultArray){
    for(Row arr : lottoArray.getRows()){
        int valueByIndex = 0;
        for(Integer number : arr.getColumns()) {
            valueByIndex++;
            int indexOfArr = lottoArray.getRows().indexOf(arr);
            if(number == max){
                Integer[] result = new Integer[2];
                result[0] = indexOfArr+1;
                result[1] = valueByIndex + indexOfArr+1;
                Row row = new Row(result);
                resultArray.addRow(row);
            }
        }
    }
}






