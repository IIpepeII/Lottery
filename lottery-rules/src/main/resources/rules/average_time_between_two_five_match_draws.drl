import java.util.ArrayList;
import java.util.List;
import com.lottery.model.AverageTimeBetweenTwoMatchFiveDrawsResult;
import com.lottery.model.WeeklyDrawList;
import com.lottery.model.WeeklyDraw;
import java.util.Arrays;
import org.slf4j.Logger;
global Logger LOGGER;

rule "Average Time Between Two Match Five Draws"
    when
        $drawList : WeeklyDrawList()
        $result : AverageTimeBetweenTwoMatchFiveDrawsResult()
    then
        LOGGER.debug("Average Time Between Two Match Five Draws futás: INDUL");
        LOGGER.debug("findAverageTimeBetweenTwoFiveMatchDraws futás: INDUL");
        $result.setResult(findAverageTimeBetweenTwoFiveMatchDraws($drawList, $result));
        LOGGER.debug("findAverageTimeBetweenTwoFiveMatchDraws futás: VÉGE");
        LOGGER.debug("Average Time Between Two Match Five Draws futás: VÉGE");

    end

/*
 * Ez a method végigmegy a WeeklyDrawList-ből származó húzásokon. Ha ötös találattal találkozik. beindít egy countert
 * és a következő ötös találatig pörgeti a counter-t. Amikor újra találkozik ötös találattal, nullázza a countert.
 * Minden találatkor rögzíti az eltelt hetek számát jelző counter értékét egy listába.
 * Feltételezi, hogy a húzások időrendi sorrendben érkeznek be.
 */
function Float findAverageTimeBetweenTwoFiveMatchDraws(WeeklyDrawList drawList, AverageTimeBetweenTwoMatchFiveDrawsResult result){

       int counter = 0;
       for(WeeklyDraw draw : drawList.getDrawListPreparedForDrools()){
           Integer fiveMatchNumber = draw.getFiveMatch();
           if(fiveMatchNumber != null && fiveMatchNumber != 0){
               counter++;
           }
       }
        Float arrSize = new Float( drawList.getDrawListPreparedForDrools().size());
       return arrSize/counter;
}
